These tests were prepared to be checked against a party cap of 8.
Evaluation happens with the provided ../test-suite.pl script, which
extends testX and compares it to testX_expected. If they're not the same,
something is broken!

tests for PlayerX:
1: noop
2: triggers, negated triggers, OR counts (no body)
3: whole blocks (mentions in body)
4: body append
5: whole blocks (mentions in both)
6: body append (multiple response blocks)
7: body append (separate response blocks)
8: body append + variables grrrr (bg2/fguard.baf, bg2/borinall.baf)
9: accidental positives + bad decompile ("DeadPlayer6" global)

11: triggers (multiple OR blocks)
12: triggers (OR block with extra actions)
13: triggers (OR block with extra player actions)
14: triggers (multiple OR + OR block with extra actions)
15: triggers (multiple OR + OR block with extra player actions)
16: triggers (multiple OR x extra player actions + extra action)
17: triggers (whole block)
18: triggers (whole block + OR)
19: triggers (whole block + multiple mentions)
20: whole block (multiple mentions in body)

TODO:
10: NumInParty exception? (borinall.baf): 
	if parameter is divided by count of PlayerX objects and all are in separate
	response blocks, leave alone, copy whole, append new objects and extend original param to 8?


TODO: repeat for PlayerXFill (autogenerate? bg2/cut37a.baf is the only vanilla user). Currently not needed, as we loosely match on PlayerX
TODO: how/ilgem6.baf (why oh why didn't they use [PC])

